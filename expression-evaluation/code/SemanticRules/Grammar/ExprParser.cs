//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SemanticRules.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, DIGIT=5, WS=6;
	public const int
		RULE_expr = 0, RULE_term = 1, RULE_fact = 2;
	public static readonly string[] ruleNames = {
		"expr", "term", "fact"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'*'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public int value;
		public TermContext _term;
		public ExprContext _expr;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_expr);
		try {
			State = 14;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6;
				_localctx._term = term();
				State = 7;
				Match(T__0);
				State = 8;
				_localctx._expr = expr();
				_localctx.value =  _localctx._term.value + _localctx._expr.value;
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 11;
				_localctx._term = term();
				_localctx.value =  _localctx._term.value;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public int value;
		public FactContext _fact;
		public TermContext _term;
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 2, RULE_term);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16;
				_localctx._fact = fact();
				State = 17;
				Match(T__1);
				State = 18;
				_localctx._term = term();
				_localctx.value =  _localctx._fact.value * _localctx._term.value;
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21;
				_localctx._fact = fact();
				_localctx.value =  _localctx._fact.value;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		public int value;
		public ExprContext _expr;
		public IToken _DIGIT;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(ExprParser.DIGIT, 0); }
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 4, RULE_fact);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				Match(T__2);
				State = 27;
				_localctx._expr = expr();
				State = 28;
				Match(T__3);
				_localctx.value =  _localctx._expr.value;
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				_localctx._DIGIT = Match(DIGIT);
				_localctx.value =  Int32.Parse((_localctx._DIGIT!=null?_localctx._DIGIT.Text:null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,6,36,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,15,
		8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,25,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,34,8,2,1,2,0,0,3,0,2,4,0,0,35,0,14,1,0,0,0,2,24,1,0,0,0,4,33,1,
		0,0,0,6,7,3,2,1,0,7,8,5,1,0,0,8,9,3,0,0,0,9,10,6,0,-1,0,10,15,1,0,0,0,
		11,12,3,2,1,0,12,13,6,0,-1,0,13,15,1,0,0,0,14,6,1,0,0,0,14,11,1,0,0,0,
		15,1,1,0,0,0,16,17,3,4,2,0,17,18,5,2,0,0,18,19,3,2,1,0,19,20,6,1,-1,0,
		20,25,1,0,0,0,21,22,3,4,2,0,22,23,6,1,-1,0,23,25,1,0,0,0,24,16,1,0,0,0,
		24,21,1,0,0,0,25,3,1,0,0,0,26,27,5,3,0,0,27,28,3,0,0,0,28,29,5,4,0,0,29,
		30,6,2,-1,0,30,34,1,0,0,0,31,32,5,5,0,0,32,34,6,2,-1,0,33,26,1,0,0,0,33,
		31,1,0,0,0,34,5,1,0,0,0,3,14,24,33
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SemanticRules.Grammar
